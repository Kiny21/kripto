function permute(k, arr, n)
    permu:= "";
    for i in [1 .. n] do
        permu := permu*k[arr[i]];
	end for;
    return permu;
end function;

function shift_left(k, nth_shifts)
    s := "";
    for i in [1..nth_shifts] do
        for j in [2..#k] do
            s := s * k[j];
	end for;
        s := s * k[1];
        k := s;
        s := "";
	
	end for;
    return k;
end function;  

function Xor(a, b)
    ans := "";
    for i in [1..#a] do
        if a[i] eq b[i] then
            ans:= ans * "0";
        else
            ans := ans * "1";
	end if;
	end for;   
 return ans;
end function;



initial_perm := [58, 50, 42, 34, 26, 18, 10, 2,
                60, 52, 44, 36, 28, 20, 12, 4,
                62, 54, 46, 38, 30, 22, 14, 6,
                64, 56, 48, 40, 32, 24, 16, 8,
                57, 49, 41, 33, 25, 17, 9, 1,
                59, 51, 43, 35, 27, 19, 11, 3,
                61, 53, 45, 37, 29, 21, 13, 5,
                63, 55, 47, 39, 31, 23, 15, 7];
 

exp_d := [32, 1 , 2 , 3 , 4 , 5 , 4 , 5,
         6 , 7 , 8 , 9 , 8 , 9 , 10, 11,
         12, 13, 12, 13, 14, 15, 16, 17,
         16, 17, 18, 19, 20, 21, 20, 21,
         22, 23, 24, 25, 24, 25, 26, 27,
         28, 29, 28, 29, 30, 31, 32, 1 ];
 

per := [ 16,  7, 20, 21,
        29, 12, 28, 17,
         1, 15, 23, 26,
         5, 18, 31, 10,
         2,  8, 24, 14,
        32, 27,  3,  9,
        19, 13, 30,  6,
        22, 11,  4, 25 ];
 

S1:=[
[14, 4,	13,	1,	2,	15,	11,	8,	3,	10,	6,	12,	5,	9,	0,	7],
[0,	15,	7,	4,	14,	2,	13,	1,	10,	6,	12,	11,	9,	5,	3,	8],
[4,	1,	14,	8,	13,	6,	2,	11,	15,	12,	9,	7,	3,	10,	5,	0],
[15,12,	8,	2,	4,	9,	1,	7,	5,	11,	3,	14,	10,	0,	6,	13]];

S2:=[
[15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10],
[3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5],
[0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15],
[13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9]];

S3:=[
[10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8],
[13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1],
[13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7],
[1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12]];
 
S4:=[
[7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15],
[13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9],
[10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4],
[3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14]];
 
S5:=[
[2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9],
[14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6],
[4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14],
[11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3]];
 
S6:=[
[12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11],
[10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8],
[9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6],
[4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13]];
 
S7:=[
[4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1],
[13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6],
[1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2],
[6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12]];
 
S8:=[
[13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7],
[1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2],
[7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8],
[2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11]];

sbox:=[S1,S2,S3,S4,S5,S6,S7,S8];
   

final_perm:=[];
for i in [1..#initial_perm] do
	a:=initial_perm[i];
	final_perm[a]:=i;
end for;


function encrypt(pt, rkb, rk)	
    pt := hex2bin(pt);
    pt := permute(pt, initial_perm, 64);
    print("Kezdeti permutacio utan"); 
    print(bin2hex(pt));
     
    
    left := Substring(pt, 1, 32);
    right:=Substring(pt, 33, 32);
    for i in [1 .. 16] do       
        right_expanded := permute(right, exp_d, 48);
         
        xor_x := Xor(right_expanded, rkb[i]);
        sbox_str := "";
        for j in [1.. 8] do
            row := bin2dec(xor_x[j * 6-5]*xor_x[j * 6]);
            col := bin2dec(xor_x[j * 6 -4] *xor_x[j * 6 -3]*xor_x[j * 6 - 2]*xor_x[j * 6 - 1]);

	    A:=sbox[j];	
	    val := A[(StringToInteger(row)+1)][(StringToInteger(col)+1)];

            sbox_str := sbox_str * dec2bin(val);
	end for;
	
             
        
        sbox_str := permute(sbox_str, per, 32);
        result := Xor(left, sbox_str);
        left := result;
         
        if i ne 16 then
	    temp:="";
	    temp:=left;
            left:= right;
	    right:= temp;
		combine := left * right;
	else
		combine:=left*right;
	end if;
	
        
	printf "%o.kor utan: %o, %o, %o
",i, bin2hex(left), bin2hex(right),rk[i];
     
    
     
 	
	end for;   
    cipher_text := permute(combine, final_perm, 64);
    return cipher_text;
end function;

pt := "123456ABCD132536";
key := "AABB09182736CCDD";
 
key := hex2bin(key);

keyp := [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4 ];

key := permute(key, keyp, 56);


shift_table:=[];
for i in [1..16] do
	if i eq 1 xor i eq 2 xor i eq 9 xor i eq 16 then
		Append(~shift_table,1);
	else
		Append(~shift_table,2);
	end if;
end for;


 

key_comp := [14, 17, 11, 24, 1, 5,
            3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8,
            16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55,
            30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53,
            46, 42, 50, 36, 29, 32 ];

left := Substring(key,1,28);    
right := Substring(key,29,28);  
 
rkb := [];
rk  := [];
for i in [1 .. 16] do
    left := shift_left(left, shift_table[i]);
    right := shift_left(right, shift_table[i]);
    combine_str := left *right;
    round_key := permute(combine_str, key_comp, 48);
  
    Append(~rkb,round_key);
    Append(~rk,bin2hex(round_key));
end for;
 
print("Titkositas");
cipher_text := bin2hex(encrypt(pt, rkb, rk));
print("Titkositott szoveg: ");
print(cipher_text);
 
print("Visszafejtes");
rkb_rev := Reverse(rkb);
rk_rev := Reverse(rk);
text := bin2hex(encrypt(cipher_text, rkb_rev, rk_rev));
print("Nyilt szoveg: ");
print(text);


